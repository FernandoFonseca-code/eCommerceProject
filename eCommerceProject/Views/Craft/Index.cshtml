@using Models
@model CraftCatalogViewModel

@{
    ViewData["Title"] = "Craft Catalog";
    var alertMessage = TempData["Message"]?.ToString();
    var errorMessage = TempData["ErrorMessage"]?.ToString();
}

<h1>Catalog</h1>
@* This moves the AlertMessages to the Shared/_AlertMessage file to handle various formatting.
    This is a good example of how to use partials to keep your code DRY.
*@
@if (alertMessage != null)
{
    <partial name="_AlertMessage" model="@(alertMessage, "success")" />
}

@if (errorMessage != null)
{
    <partial name="_AlertMessage" model="@(errorMessage, "danger")" />
}
<p>
    <a asp-action="Create" asp-controller="Craft">Create a Craft</a>
</p>

@if (Model.Crafts.Count() != 0)
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Crafts.FirstOrDefault().CraftId)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Crafts.FirstOrDefault().Title)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Crafts.FirstOrDefault().Price)
                </th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @foreach (Craft item in Model.Crafts) 
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.CraftId)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Price)
                    </td>
                    <td>
                        @* Newer Syntax *@
                        <a class="btn btn-primary" asp-action="Edit" asp-route-id="@item.CraftId">Edit</a>
                        <a class="btn btn-secondary" asp-action="Details" asp-route-id="@item.CraftId">Details</a>
                        <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.CraftId">Delete</a>

                        @* Older Syntax*@
                        @* @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) | *@
                        @* @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) | *@
                        @* @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ }) *@
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h2>There are no crafts for this page.</h2>
}
@*Resource for styling pagination
    https://getbootstrap.com/docs/5.3/components/pagination/
*@
<nav aria-label="Craft Catalog Pages">
    <ul class="pagination">
        @for (int i = 1; i <= Model.LastPage; i++)
        {
            if (i == Model.CurrentPage)
            {
                <li class="page-item active">
                    <a class="page-link">@i</a>
                </li>
            }
            else
            {
                <li class="page-item">
                    <a class= "page-link" asp-action="Index" asp-route-id="@i">@i</a>
                </li>
            } 
        }
    </ul>
</nav>